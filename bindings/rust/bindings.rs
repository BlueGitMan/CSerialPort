/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerialPortInfo {
    pub portName: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub hardwareId: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SerialPortInfo"][::std::mem::size_of::<SerialPortInfo>() - 768usize];
    ["Alignment of SerialPortInfo"][::std::mem::align_of::<SerialPortInfo>() - 1usize];
    ["Offset of field: SerialPortInfo::portName"]
        [::std::mem::offset_of!(SerialPortInfo, portName) - 0usize];
    ["Offset of field: SerialPortInfo::description"]
        [::std::mem::offset_of!(SerialPortInfo, description) - 256usize];
    ["Offset of field: SerialPortInfo::hardwareId"]
        [::std::mem::offset_of!(SerialPortInfo, hardwareId) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerialPortInfoArray {
    pub portInfo: *mut SerialPortInfo,
    pub size: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SerialPortInfoArray"][::std::mem::size_of::<SerialPortInfoArray>() - 16usize];
    ["Alignment of SerialPortInfoArray"][::std::mem::align_of::<SerialPortInfoArray>() - 8usize];
    ["Offset of field: SerialPortInfoArray::portInfo"]
        [::std::mem::offset_of!(SerialPortInfoArray, portInfo) - 0usize];
    ["Offset of field: SerialPortInfoArray::size"]
        [::std::mem::offset_of!(SerialPortInfoArray, size) - 8usize];
};
pub const OperateMode_AsynchronousOperate: OperateMode = 0;
pub const OperateMode_SynchronousOperate: OperateMode = 1;
pub type OperateMode = ::std::os::raw::c_int;
pub const BaudRate_BaudRate110: BaudRate = 110;
pub const BaudRate_BaudRate300: BaudRate = 300;
pub const BaudRate_BaudRate600: BaudRate = 600;
pub const BaudRate_BaudRate1200: BaudRate = 1200;
pub const BaudRate_BaudRate2400: BaudRate = 2400;
pub const BaudRate_BaudRate4800: BaudRate = 4800;
pub const BaudRate_BaudRate9600: BaudRate = 9600;
pub const BaudRate_BaudRate14400: BaudRate = 14400;
pub const BaudRate_BaudRate19200: BaudRate = 19200;
pub const BaudRate_BaudRate38400: BaudRate = 38400;
pub const BaudRate_BaudRate56000: BaudRate = 56000;
pub const BaudRate_BaudRate57600: BaudRate = 57600;
pub const BaudRate_BaudRate115200: BaudRate = 115200;
pub const BaudRate_BaudRate921600: BaudRate = 921600;
pub type BaudRate = ::std::os::raw::c_int;
pub const DataBits_DataBits5: DataBits = 5;
pub const DataBits_DataBits6: DataBits = 6;
pub const DataBits_DataBits7: DataBits = 7;
pub const DataBits_DataBits8: DataBits = 8;
pub type DataBits = ::std::os::raw::c_int;
pub const Parity_ParityNone: Parity = 0;
pub const Parity_ParityOdd: Parity = 1;
pub const Parity_ParityEven: Parity = 2;
pub const Parity_ParityMark: Parity = 3;
pub const Parity_ParitySpace: Parity = 4;
pub type Parity = ::std::os::raw::c_int;
pub const StopBits_StopOne: StopBits = 0;
pub const StopBits_StopOneAndHalf: StopBits = 1;
pub const StopBits_StopTwo: StopBits = 2;
pub type StopBits = ::std::os::raw::c_int;
pub const FlowControl_FlowNone: FlowControl = 0;
pub const FlowControl_FlowHardware: FlowControl = 1;
pub const FlowControl_FlowSoftware: FlowControl = 2;
pub type FlowControl = ::std::os::raw::c_int;
pub const SerialPortError_ErrorUnknown: SerialPortError = -1;
pub const SerialPortError_ErrorOK: SerialPortError = 0;
pub const SerialPortError_ErrorFail: SerialPortError = 1;
pub const SerialPortError_ErrorNotImplemented: SerialPortError = 2;
pub const SerialPortError_ErrorInner: SerialPortError = 3;
pub const SerialPortError_ErrorNullPointer: SerialPortError = 4;
pub const SerialPortError_ErrorInvalidParam: SerialPortError = 5;
pub const SerialPortError_ErrorAccessDenied: SerialPortError = 6;
pub const SerialPortError_ErrorOutOfMemory: SerialPortError = 7;
pub const SerialPortError_ErrorTimeout: SerialPortError = 8;
pub const SerialPortError_ErrorNotInit: SerialPortError = 9;
pub const SerialPortError_ErrorInitFailed: SerialPortError = 10;
pub const SerialPortError_ErrorAlreadyExist: SerialPortError = 11;
pub const SerialPortError_ErrorNotExist: SerialPortError = 12;
pub const SerialPortError_ErrorAlreadyOpen: SerialPortError = 13;
pub const SerialPortError_ErrorNotOpen: SerialPortError = 14;
pub const SerialPortError_ErrorOpenFailed: SerialPortError = 15;
pub const SerialPortError_ErrorCloseFailed: SerialPortError = 16;
pub const SerialPortError_ErrorWriteFailed: SerialPortError = 17;
pub const SerialPortError_ErrorReadFailed: SerialPortError = 18;
pub type SerialPortError = ::std::os::raw::c_int;
pub type pFunReadEvent = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ),
>;
pub type pFunHotPlugEvent = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ),
>;
unsafe extern "C" {
    pub fn CSerialPortAvailablePortInfosMalloc(portInfoArray: *mut SerialPortInfoArray);
}
unsafe extern "C" {
    pub fn CSerialPortAvailablePortInfosFree(portInfoArray: *mut SerialPortInfoArray);
}
unsafe extern "C" {
    pub fn CSerialPortMalloc() -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CSerialPortFree(pSerialPort: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CSerialPortInit(
        pSerialPort: *mut ::std::os::raw::c_void,
        portName: *const ::std::os::raw::c_char,
        baudRate: ::std::os::raw::c_int,
        parity: Parity,
        dataBits: DataBits,
        stopbits: StopBits,
        flowControl: FlowControl,
        readBufferSize: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn CSerialPortSetOperateMode(
        pSerialPort: *mut ::std::os::raw::c_void,
        operateMode: OperateMode,
    );
}
unsafe extern "C" {
    pub fn CSerialPortOpen(pSerialPort: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortClose(pSerialPort: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CSerialPortIsOpen(pSerialPort: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortConnectReadEvent(
        pSerialPort: *mut ::std::os::raw::c_void,
        pFun: pFunReadEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortDisconnectReadEvent(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortConnectHotPlugEvent(
        pSerialPort: *mut ::std::os::raw::c_void,
        pFun: pFunHotPlugEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortDisconnectHotPlugEvent(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortGetReadBufferUsedLen(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn CSerialPortReadData(
        pSerialPort: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortReadAllData(
        pSerialPort: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortReadLineData(
        pSerialPort: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortWriteData(
        pSerialPort: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortSetDebugModel(
        pSerialPort: *mut ::std::os::raw::c_void,
        isDebug: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn CSerialPortSetReadIntervalTimeout(
        pSerialPort: *mut ::std::os::raw::c_void,
        msecs: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn CSerialPortGetReadIntervalTimeout(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn CSerialPortSetMinByteReadNotify(
        pSerialPort: *mut ::std::os::raw::c_void,
        minByteReadNotify: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn CSerialPortFlushBuffers(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortFlushReadBuffers(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortFlushWriteBuffers(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortGetLastError(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortGetLastErrorMsg(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn CSerialPortClearError(pSerialPort: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn CSerialPortSetPortName(
        pSerialPort: *mut ::std::os::raw::c_void,
        portName: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn CSerialPortGetPortName(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn CSerialPortSetBaudRate(
        pSerialPort: *mut ::std::os::raw::c_void,
        baudRate: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn CSerialPortGetBaudRate(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSerialPortSetParity(pSerialPort: *mut ::std::os::raw::c_void, parity: Parity);
}
unsafe extern "C" {
    pub fn CSerialPortGetParity(pSerialPort: *mut ::std::os::raw::c_void) -> Parity;
}
unsafe extern "C" {
    pub fn CSerialPortSetDataBits(pSerialPort: *mut ::std::os::raw::c_void, dataBits: DataBits);
}
unsafe extern "C" {
    pub fn CSerialPortGetDataBits(pSerialPort: *mut ::std::os::raw::c_void) -> DataBits;
}
unsafe extern "C" {
    pub fn CSerialPortSetStopBits(pSerialPort: *mut ::std::os::raw::c_void, stopbits: StopBits);
}
unsafe extern "C" {
    pub fn CSerialPortGetStopBits(pSerialPort: *mut ::std::os::raw::c_void) -> StopBits;
}
unsafe extern "C" {
    pub fn CSerialPortSetFlowControl(
        pSerialPort: *mut ::std::os::raw::c_void,
        flowControl: FlowControl,
    );
}
unsafe extern "C" {
    pub fn CSerialPortGetFlowControl(pSerialPort: *mut ::std::os::raw::c_void) -> FlowControl;
}
unsafe extern "C" {
    pub fn CSerialPortSetReadBufferSize(
        pSerialPort: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn CSerialPortGetReadBufferSize(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn CSerialPortSetDtr(pSerialPort: *mut ::std::os::raw::c_void, set: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn CSerialPortSetRts(pSerialPort: *mut ::std::os::raw::c_void, set: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn CSerialPortGetVersion(
        pSerialPort: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
